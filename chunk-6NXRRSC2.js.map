{
  "version": 3,
  "sources": ["src/app/pages/program-list/program-list.component.ts", "src/app/pages/program-list/program-list.component.html"],
  "sourcesContent": ["import { CommonModule } from '@angular/common';\nimport { Component, Inject, Input, OnInit } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { trigger, transition, style, animate, query, stagger } from '@angular/animations';\nimport { ActivatedRoute, NavigationExtras, Router } from '@angular/router';\nimport { FileService } from '../../services/file.service';\nimport { Program } from '../../classes/program';\nimport { lastValueFrom } from 'rxjs';\nimport { of } from 'rxjs';\nimport { SpinnerComponent } from '../../components/spinner/spinner.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ProgramIntroModalComponent } from '../program-display/program-intro-modal/program-intro-modal.component';\n\n@Component({\n  selector: 'app-program-list',\n  standalone: true,\n  imports: [MatPaginatorModule, CommonModule, MatCardModule, MatIconModule, MatButtonModule, SpinnerComponent],\n  templateUrl: './program-list.component.html',\n  styleUrl: './program-list.component.scss',\n  animations: [\n    trigger('listAnimation', [\n      transition('* <=> *', [\n        query(':enter',\n          [style({ opacity: 0 }), stagger('60ms', animate('600ms ease-out', style({ opacity: 1 })))],\n          { optional: true }\n        ),\n        query(':leave',\n          animate('200ms', style({ opacity: 0 })),\n          { optional: true }\n        )\n      ])\n    ])\n  ]\n})\nexport class ProgramListComponent implements OnInit {\n  programs: Program[] = [];\n  private type: string = \"\";\n  loadingList: boolean = true;\n\n  constructor(private router: Router, private route: ActivatedRoute, private fileService: FileService) { }\n\n  async ngOnInit() {\n    this.type = this.route.snapshot.paramMap.get('type') ?? \"\";\n    await this.loadFiles();\n  }\n\n  async loadFiles() {\n    this.loadingList = true;\n    try {\n      const programs: Program[] = await lastValueFrom(this.fileService.getList(this.type));\n      this.loadingList = false;\n      this.programs = programs.sort((a, b) => a.difficulty - b.difficulty);\n    } catch (error) {\n      console.log('Error loading files:', error);\n      \n    }\n  }\n\n  goToDisplay(program: Program) {\n    this.router.navigate(['/display', this.type, program.id],{state:{program}});\n  }\n}\n", "@if (!loadingList){\n    <div class=\"programs-container\">\n        @for (program of programs; track $index) {\n            <div class=\"program\">\n                <section class=\"header\">\n                    <h3>{{ program.title }}</h3>\n                    <div class=\"stars\">\n                        <span style=\"margin-right: 5px;\">Dificultad:</span>\n                        <section class=\"icons\">\n                            <ng-container *ngFor=\"let star of [1, 2, 3, 4, 5]\">\n                                <mat-icon *ngIf=\"star <= program.difficulty\">star</mat-icon>\n                                <mat-icon *ngIf=\"star > program.difficulty\" class=\"not-filled\">star_border</mat-icon>\n                            </ng-container>\n                        </section>                      \n                    </div>\n                </section>\n                <button mat-flat-button color=\"primary\" (click)=\"goToDisplay(program)\">Ver Ejemplo</button>\n            </div>\n        }\n    </div>\n} @else {\n<app-spinner [loading]=\"loadingList\"></app-spinner>\n}"],
  "mappings": "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",
  "names": ["\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275elementContainerStart", "\u0275\u0275template", "ProgramListComponent_Conditional_0_For_2_ng_container_8_mat_icon_1_Template", "ProgramListComponent_Conditional_0_For_2_ng_container_8_mat_icon_2_Template", "\u0275\u0275advance", "\u0275\u0275property", "star_r2", "program_r3", "difficulty", "ProgramListComponent_Conditional_0_For_2_ng_container_8_Template", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r1", "$implicit", "ctx_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "goToDisplay", "\u0275\u0275textInterpolate", "title", "\u0275\u0275pureFunction0", "_c0", "\u0275\u0275repeaterCreate", "ProgramListComponent_Conditional_0_For_2_Template", "\u0275\u0275repeaterTrackByIndex", "\u0275\u0275repeater", "programs", "\u0275\u0275element", "loadingList", "ProgramListComponent", "constructor", "router", "route", "fileService", "type", "ngOnInit", "__async", "snapshot", "paramMap", "get", "loadFiles", "lastValueFrom", "getList", "sort", "a", "b", "error", "console", "log", "program", "navigate", "id", "state", "\u0275\u0275directiveInject", "Router", "ActivatedRoute", "FileService", "selectors", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "rf", "ctx", "ProgramListComponent_Conditional_0_Template", "ProgramListComponent_Conditional_1_Template", "\u0275\u0275conditional", "MatPaginatorModule", "CommonModule", "NgForOf", "NgIf", "MatCardModule", "MatIconModule", "MatIcon", "MatButtonModule", "MatButton", "SpinnerComponent", "styles", "data", "animation", "trigger", "transition", "query", "style", "opacity", "stagger", "animate", "optional", "_ProgramListComponent"]
}
